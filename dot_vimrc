""""""""""""""""""""
" general settings
""""""""""""""""""""
set nocompatible

" default shell
set shell=zsh

" use .vim path first
set runtimepath=~/.vim,$VIMRUNTIME

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" load plugins
if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
endif

" Sets how many lines of history VIM has to remember
set history=100

" set max tabs
set tabpagemax=50

" optimize for fast term connection
set ttyfast
set ttymouse=xterm2

" default search/replace/g
set gdefault

" disable modelines for security
set modelines=0
set nomodeline

" ignore whitespace in vimdiff
if &diff
    set diffopt+=iwhite
endif


" Enable filetype plugin
filetype plugin on
filetype indent on

" try to set locale
try
    lang en_US
catch
endtry

"set encoding
if has('multi_byte')
  scriptencoding utf-8
  set encoding=utf-8
  set fileencodings=utf-8,cp932,sjis,utf-16le,euc-jp

  if has("win32") || has("win64")
    set termencoding=gbk
  endif
  if has("linux") || has("unix")
    set termencoding=utf-8
  endif
endif

" None word dividers.
set isk+=_,$,@,%,#,-

" Try to detect file formats.
" Unix for new files and autodetect for the rest.
set fileformats=unix,dos,mac

" Disable unsafe commands.
set secure

" Disable the splash screen (and some various tweaks for messages).
set shortmess=aTItoO

" Show the filename in the window titlebar.
if exists("+title")
  set title
endif

" auto paste mode
" https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" Allow virtual edit in visual block.
set virtualedit=block

" Specify the behavior when switching between buffers.
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files. (You want this!)
if has('viminfo')
  if has('autocmd')
     autocmd BufReadPost *\(.git/COMMIT_EDITMSG\)\@<!
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
  endif
  " Remember info about open buffers on close.
  set viminfo^=%
endif

"""""""""""""""""""""""""""""
" user interface
"""""""""""""""""""""""""""""

" set 7 lines to cursor when moving vertically with j/k
set so=7

" enhance command-line completion
if exists("+wildmenu")
    set wildmenu
    set wildmode=longest:full,list:full
endif

" text completion settings
set completeopt=longest,menuone

" ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win32") || has("win64")
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
  set wildignore+=.git\*,.hg\*,.svn\*
endif

" command bar height
set cmdheight=1

" buffers can exist in bg without being in window
" https://medium.com/usevim/vim-101-set-hidden-f78800142855
set hidden

" allow cursor keys in insert mode
set esckeys

" allow backspace over everything in insert mode
set backspace=indent,eol,start

" toggle nopaste
set pastetoggle=<F2>

" free the cursor from line breaks
set whichwrap=b,s,h,l,<,>,[,]

" search settings
set ignorecase
set smartcase
if exists("+incsearch")
    set incsearch
endif

" magic regular expressions
set magic

" set splits
set splitright
set splitbelow

" don't move cursor to line start when moving
set nostartofline

" show cursor position
if exists("+ruler")
    set ruler
endif

" disable line numbers
set nonumber

" no error sounds
set noerrorbells
set visualbell

" no left margin
set foldcolumn=0


"""""""""""""""""""""""
" bracket settings
"""""""""""""""""""""""

" show matching brackets when cursor over
set showmatch

" include matching angle brackets
set matchpairs+=<:>

" how long to blink when matching brackets
set mat=2


""""""""""""""""""""""""
" colors!
""""""""""""""""""""""""

" turn on colors and syntax highlights

if &t_Co > 2 || has("gui_running")
    try
        colorscheme monokain
    catch /^Vim\%((\a\+)\)\=:E185/
        " not available
    endtry

    if v:version >= 703
        set textwidth=80
        set colorcolumn=+1
    endif

    " dark mode
    set background=dark

    " color syntax highlights
    if exists("+syntax")
        syntax on
        syntax sync fromstart
    endif

    " switch on highlighting last search
    if exists("+hlsearch")
        set hlsearch
    endif

    " highlight current line
    if exists("+cursorline")
        set cursorline
    endif

    " highlight trailing spaces in red
    if has('autocmd')
        highlight ExtraWhitespace ctermbg=1 guibg=red
        match ExtraWhitespace /\s\+$/
        autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
        autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
        autocmd InsertLeave * match ExtraWhitespace /\s\+$/
        if exists('*clearmatches')
            autocmd BufWinLeave * call clearmatches()
        endif
    endif

    " Reload .vimrc when saving it.
    if has("autocmd")
        autocmd BufWritePost .vimrc nested source %
    endif

    " Highlight conflict markers.
    match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
endif

"""""""""""""""""""""""""""""""""
" files and backups
"""""""""""""""""""""""""""""""""

" Keep a backup-file.
set backup
if exists("+writebackup")
    set writebackup
    set backupdir=~/.vim/backups
endif

" Centralize backups, swapfiles and undo history.
set directory=~/.vim/swaps
if exists("+undodir")
    set undodir=~/.vim/undo
endif

" spellcheck commit messages
autocmd FileType gitcommit setlocal spell

"""""""""""""""""""""""""""""""""
" text and tabs
"""""""""""""""""""""""""""""""""
set expandtab " tabs -> spaces

if exists("+smarttab")
    set smarttab
endif

if exists("+autoindent")
    set noautoindent
endif

if exists("+smartindent")
    set smartindent
endif

" 1 tab === 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

" one space after punctuation
set nojoinspaces

" don't wrap text when typing
" http://vimdoc.sourceforge.net/htmldoc/change.html#fo-table
set fo-=t

" trailing whitespace characters
set listchars=tab:>>,trail:!,eol:$

" support for bullet lists
set formatoptions+=n

""""""""""""""""""""""""""""""""""""""""""""
" moving around, tabs, windows, buffers
""""""""""""""""""""""""""""""""""""""""""""

" gi moves to last insert mode
" gI moves to last modification
nnoremap gI `.

" move across wrapped lines
nnoremap j gj
nnoremap k gk

" disable highlight on <leader><cr>
map <silent> <leader><cr> :noh<cr>

" move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" close current buffer
map <leader>bd :Bclose<cr>

" close all buffers
map <leader>ba :1,1000 bd!<cr>

" tab mappings
nnoremap <C-S-Left> :tabprevious<cr>
nnoremap <C-S-Rigt> :tabnext<cr>
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>

" new tab with current buffer's path
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" switch CWD to directory of open buffer
map <leader>cd :cd %p:h<cr>:pwd<cr>


""""""""""""""""""""""""""""""""""""""""
" status line
""""""""""""""""""""""""""""""""""""""""

" always show status line
set laststatus=2

" show current mode
if exists("+showmode")
    set showmode
endif

" show partial command as typed
if exists("+showcmd")
    set showcmd
endif

"""""""""""""""""""""""""""""""""""""""
" more mappings!
"""""""""""""""""""""""""""""""""""""""

" fast save
nmap <leader>w :w!<cr>

" fast quit
nmap <leader>q :q<cr>

" visual mode: # or * searches for selection
vnoremap <silent> * : call VisualSelection('f', '')<CR>
vnoremap <silent> # : call VisualSelection('b', '')<CR>

" remap vim 0 to first non-blank char
map 0 ^

" yank from cursor to EOL
nnoremap Y y$

" Yank and put system pasteboard with <Leader>y/p
noremap <leader>y "*y
noremap <leader>Y "*y$
nnoremap <leader>yy "*yy
noremap <leader>p "*p
noremap <leader>P "*P

" select all
map <leader>a ggVG

" don't open man pages
nmap K <nop>

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" When you press <leader>r you can search and replace the selected text.
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" strip whitespace (,sw)
noremap <leader>sw :call StripWhitespace()<CR>

" save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" quickopen a markdown buffer
map <leader>x :e ~/buffer.md<cr>

" toggle paste mode
map <leader>pp :setlocal paste!<cr>

"""""""""""""""""""""""""""""""""
" helper functions
"""""""""""""""""""""""""""""""""
function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" Strip whitespace.
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" Multi-purpose tab key. (auto-complete)
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<Tab>"
  else
    return "\<C-p>"
  endif
endfunction

" Strip trailing whitespace.
function! StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("Ack \"" . l:pattern . "\" " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
