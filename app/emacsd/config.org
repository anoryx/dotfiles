* Base config

** use-package config

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC


** Strip down UI

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'inhibit-startup-screen t) ; no splash screen on start
  (tool-bar-mode -1)   ; no tool bar with icons
  (scroll-bar-mode -1) ; no scroll bars
  (menu-bar-mode -1)   ; no menu bar
  (setq initial-scratch-message "")
#+END_SRC


** Cleaner backups

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  (customize-set-variable 'backup-directory-alist `((".*" . ,temporary-file-directory)))
#+END_SRC


** Theme

#+BEGIN_SRC emacs-lisp
  (use-package monokai-alt-theme)
#+END_SRC


** Better parentheses

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
 :commands (rainbow-delimiters-mode)
 :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  (defvar show-paren-delay)
  (setq show-paren-delay 0.0)
  (show-paren-mode t)
#+END_SRC


** Pythonic tabs

#+BEGIN_SRC emacs-lisp
(customize-set-variable 'indent-tabs-mode nil)
(customize-set-variable 'standard-indent 4)
(customize-set-variable 'tab-width 4)
#+END_SRC


** y/n > yes/no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


* Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings)))
#+END_SRC


* Python Environment

** Elpy

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :config
  (when (require 'flycheck nil t)
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    (remove-hook 'elpy-modules 'elpy-module-yasnippet)
    (remove-hook 'elpy-mode-hook 'elpy-module-highlight-indentation)
    (add-hook 'elpy-mode-hook 'flycheck-mode))
  (elpy-enable)
  (setq elpy-rpc-backend "jedi")
  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "-i --simple-prompt"))
#+END_SRC


** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  :config
  (global-flycheck-mode 1))
#+END_SRC
